const container = document.querySelector(".container");
const thumbnail = document.querySelector(".thumbnail");
let size = 30;
const color = document.querySelector(".color");

let draw = false;

const settingButton = document.querySelector(".setting-btn");
const brushBoard = document.querySelector(".brush-board");

const brushButton = document.querySelector(".brush-btn");
const xButton = document.querySelector(".x-btn");

let curBrush = "O";

settingButton.addEventListener("click", function () {
  if (brushBoard.style.display == "none") brushBoard.style.display = "block";
  else brushBoard.style.display = "none";
});

xButton.addEventListener("click", function () {
  curBrush = "X";
});

brushButton.addEventListener("click", function () {
  curBrush = "O";
});

// 가로줄(-) 개수
const ROW_SIZE = 50;

// 세로줄(|) 개수
const COL_SIZE = 20;

// 비어있으면 0 , 칠해져있으면 1, X면 -1
const pixelMap = new Array(ROW_SIZE).fill(1).map((_) => {
  return new Array(COL_SIZE).fill(0);
});

/*************************************** */

const col_clues = [
  [2, 2, 2, 5, 3],
  [3, 4, 4, 2, 1, 2, 2, 3, 2],
  [2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 2],
  [2, 5, 2, 3, 2, 2, 4, 2, 2, 1],
  [6, 1, 3, 2, 5, 1, 3],

  [4, 2, 3, 1, 2, 3, 2, 2, 2],
  [2, 2, 1, 2, 1, 5, 2, 5],
  [1, 4, 3, 2, 3, 2, 3, 3],
  [1, 1, 4, 2, 4, 1, 2, 2, 1],
  [1, 2, 6, 3, 1, 1, 2],

  [2, 3, 3, 2, 3, 2],
  [3, 5, 3, 1, 2, 2],
  [2, 2, 1, 2, 1, 2, 4, 3, 2],
  [4, 3, 2, 4, 3, 2],
  [1, 3, 1, 2, 2, 2, 4],

  [1, 2, 1, 2, 2, 5, 2, 3],
  [3, 2, 2, 2, 1, 1, 1, 1, 5, 1, 2, 3, 2],
  [2, 2, 1, 6, 2, 1, 2, 4, 5, 3],
  [4, 4, 4, 5, 1, 2],
  [2, 1, 2, 2, 2],
];

const row_clues = [
  [2],
  [4, 3],
  [2, 2, 2, 2],
  [3, 1],
  [2, 2],

  [3, 2],
  [3, 2, 2],
  [2, 1, 4],
  [1, 2, 1, 2],
  [3, 2, 3],

  [3, 2, 3],
  [2, 4, 3],
  [1, 2, 3, 3],
  [2, 2, 1, 4, 2],
  [2, 2, 2, 2, 1],

  [2, 2, 3],
  [2, 4, 2],
  [3, 2, 3, 3],
  [5, 2, 2, 1],
  [2, 2, 1, 1],

  [2, 2, 2],
  [1, 1, 3, 1],
  [2, 3, 1, 2, 2],
  [2, 3, 1, 1, 4],
  [3, 2, 1],

  [1, 2],
  [3, 3, 1],
  [2, 1, 2, 2, 2, 3],
  [5, 3, 2, 2],
  [3, 2, 3, 1],

  [2, 1, 2, 2],
  [1, 2, 1, 3],
  [1, 1, 1, 3],
  [2, 2, 1, 2],
  [1, 2, 2, 2],

  [2, 2, 1, 2, 1],
  [2, 4, 1, 5],
  [1, 2, 1, 3],
  [2, 1, 2],
  [2, 2, 2, 2, 2],

  [6, 4, 1],
  [1, 2, 1, 4],
  [3, 3, 2],
  [2, 2, 3],
  [2, 1, 3],

  [3, 2, 1, 2],
  [1, 6, 2, 1],
  [2, 2, 3, 5],
  [2, 5, 2],
  [1, 3],
];

const solution = [
  [
    -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1,
  ],
  [1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1],
  [-1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1],
  [-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1],
  [-1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1],
  [1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1],
  [1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1],
  [-1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1],
  [-1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1],
  [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1],
  [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1],
  [1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
  [1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
  [-1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1],
  [-1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1],
  [-1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1],
  [-1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1],
  [-1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1],
  [-1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1],
  [-1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1],
  [-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1],
  [-1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1],
  [-1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1],
  [-1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1],
  [-1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1],
  [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1],
  [-1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1],
  [-1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1],
  [-1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1],
  [1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1],
  [1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1],
  [1, 1, -1, -1, 